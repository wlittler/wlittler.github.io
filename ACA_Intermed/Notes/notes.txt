5/3/16

grading cutoff - 1pm Sunday?

read lesson 0 - check
read lesson 1 before thursday - check
	read through pig latin app guide, play with pig latin check
	complete lesson 1 tests if possible check
	have questions when you arrive @ 6pm check
  set up tonic - check
read lesson 2 before monday

general guidelines - use above before every lesson/week.

5/4/16

questions -
Javascript reserved words - can you use variations of reserved words, such as
"native_tongue" where "native" is reserved? unanswered so far
what is the point of assigning "undefined" to a var?
please explain github edits. how can I chain together edits that I make? do they
chain automatically? what is the correct process?

5/5/16

finish the prework by tuesday OR ELSE GIZEM STARTS KILLIN' - check

pig latin due by 1pm Sunday - check
read lesson 2 before tuesday - check


pig latin process -
  1) lower the case
  2) find the first vowel
  3) slice the word
  4) reorder word
  5) add 'ay'
  6) if vowelIndex === 0, return Word + 'yay'
  7)

5/10/16

app cutoff - 3pm Sunday - done
lesson tests due before class on Thursdays - check

Class notes:

	Pure functions have no side effects. They take in their parameters, process their parameters, then return a result.
	Side effects are when global data is "messed with" inside a function.

	Return - return sends a value back to the caller of a function.

	Return ENDS execution of the function. If return gets called, anything that follows will not get called.
		ex -
			function doSomething() {
				return ; // <-- you don't actually have to return a value

			var a = 3.14159;
			var two = 2;

			return a + two;
			}

	State Machine

		Every computer operation transforms the computer state from one "value" to another.

		What are my initial conditions (values)?
		What are my final values?

	If you need to do a lot of work in a switch, consider packing your work into functions.

	Always think about decomposing large blocks of statements into functions for clarity and organization.

	In JavaScript, we have First Class Functions.

		function returnAdd() {
			return function add(num1, num2) {
				return num1 + num2;
			}
		}

		5/12/16

		My questions - What is a tab character? - answered

		Q & A

		Functions :

			- They package work together
			- They are testable
			- We don't have to think about it
			- Code reuse
			- build a library
			- organization and clarity

		Naming is important
		Give clear names that explain what functions, variables do in the code

		Hierarchy of Computation

		- Electrons moving (electricity)
		- Microprocessor Logic
		- Machine Code (00101010101)
		- Assembly Code
		- JavaScript (higher level languages)

		Function Hierarchy

		- Raw JavaScript
		- Build up a library of functions
		- Application

		Two Kinds Of Functions

		- General functionality (adding numbers)
		- Application Specific (the 'language' of your app)

		Refactor - Rewriting code to improve quality

		When to use a semicolon -

		function add(num1, num2) {
			console.log(num1, num2);
			return num1 + num2;
		}

		involves Parsing of the JavaScript code

		Computer languages:
		- compiled
		- interpreted

		Use of semicolons(expanded):
		- some is necessary
		- some is style

		Indenting

		Lesson 3

		Function Scope

		var number = 4;

		function addTwo(num) {
			var number = 2; <-- this hides outer var number
			return number + num;
		}

		function createAddNumber(number) {
		// Anything defines here is available to add number
			return function addNumber(value) {
				return value + number;
			}
		}

		var addFive = createAddNumber(5);
		var addThree = createAddNumber(3);

		this is called closure

		first class functions

		* practice with arrays and get familiar with them

		5/17/16

		*Personal project note* Love Locks - wrap the hero img in a div, see how it responds *

		Agenda:

		1) Paul rants about indentation

		2) Q & A

		3) Pair White Boarding on Tic Tac Toe

		4) Pair Programming on Tic Tac Toe

		1)	Indenting

		Why indent?

		English is composed to make it easy to follow -
			- Keep sentences a certain length
			- Structure paragraphs so they represent a single idea
			- Transitions
			- Visual cues to help guide the eyes

		Code indenting has the same purpose.

		Code indenting:

		function add(a,b) { return a + b;} // Single line function

		function complexStuff() { // everyone does JS this way, so do you!!
			// two spaces in
			var bob;
			if (true) {
				// indent two spaces
				bob = 'bob';
			}
			else if () {
				// this level
			}
			else if () {
				// this level
			}
			else {
				// tis level
			}
		}

		2) Q & A

		What is an array?

		var values = [ null, 2, "bob", ["suzy", function () { return null}], 42]

		An array can hold any value, including arrays.

		var ttt =		[['X', 'O', 'X'],
								 ['X', 'O', 'X'],
								 ['X', 'O', 'X']],


		Function school:

		function nully() { return null } // named function definition

		We can reference the function by name

		var functionRef = nully; // passing around a reference to function

		The name of a function represents the reference to the function definition.

		when we add parenthesis, we are calling the function.

		nully(); // <- function call, not reference

		We need function references as opposed to calls because we want to be able to reference a function
		before it is defined.

		5/19/16

		Agenda

		1) Q&A
		2) Expressions & Evaluation
		3) Lesson 4
		4) Finish existing work
		5) Work on Lesson 4 Tests together
		6) Whiteboard Towers of Hanoi

			Expressions "express" the values that they evaluate to.

			2+3 => 5

			var bob = 'bob';
			(bob === 'bob')

			"cat" + "bug" => "catbug"

			function isEven(number) {
				return (number % 2 === 0); // either true or false
			}

			function isEven(number) {
			 	if (number % 2 === 0)
					return true;
					}
				}

			if statements test truth value (or truthy value)

			2+3 always evaluates to 5.

			if (2+3) {
				// does this execute
			}
			else {
				// or does this execute
			}

			Data Structures:

			1) Stack

			Last In First Out (LIFO)

			Arrays

			Are lists of values
			They have an order

			Objects (Associate Arrays)

			They don't have an order
			They are a mapping between keys and values

			Data Structures are about putting data in an order that serves your application

			Arrays are not good if finding a piece of data is required

			Users Yay!

			{
				firstName: 	'paul',
				lastName: 	'nichols',
				email: 			'paul.rene.nichols@gmail.com',
				id:					'000001',
				type:				'admin',
			}

			var administrators = {
				'000001': {
					firstName: 	'paul',
					lastName: 	'nichols',
					email: 			'paul.rene.nichols@gmail.com',
					id:					'000001',
					type:				'admin',
				}
			}

			var userId;

			administrators[userId]

			Associative Arrays allow you to access data quickly

			hashing / hash table

			Can't use dot notation with key that has spaces!

			5/26/16

			Loops and Break

			* break only works in switch and loops (for, while, do while)
			* continue only works in loops

			break in a loop - quit the looping

			variable hoisting in javascript - look it up

			Do while would be used once
			A while loop will only execute when the condition is true

			6/9/16

			Lesson 6

			1) Q&A - bust

			2) Lesson 6

			OOP, yeah, you know me

			By default, right now, you can't 'require' in the browser.

			Browsers have one global name space.

			Lesson 6 - Object Oriented Programming

			Two main types of OOP

			Class based :(
			Prototype based :)

			Class based - make class - create instances

			Prototype base - an object instance becomes the basis for inheritance

			function Paul(scotch) {
				this.scotch = scotch;

				this.drinking = function () {
					console.log("I'm drinking " + this.scotch);
				}
			}

			the 'this' is an instance of prototype

			When you create an instance with new, that instance references the instance data with 'this'

			'this' is used to create and reference an object, and tie that object (data) to methods (functions)

			var lagavulin = {
				brand: 'lavavulin'
			}

			// Procedural Programming
			function whatAmIDrinking(scotch) {
				console.log(scotch.brand);
			}

			Class methods have implicit 'parameters'

			That is the 'this' object.

			if you're not using 'this', it's a param, or a global, or a static value

			There are instance methods - 'this' applies

			and there are class methods - this is undefined

			function Student(firstName, lastName) {
				this.firstName = firstName;
				this.lastName = lastName;
			}

			Student.GetToClass = function () {
				console.log('Get To Class!');
			}

			6/21/16

			Lessons 7 and 8

			1) jQuery
			2) Whiteboard/Work on Apps 7/8

			body input[type="text"]

			<div data-not-yours="10" data-price="5.25"></div>

			$([data-not-yours]).data('price') === "5.25"
			$([data-not-yours]).data('not-yours') === "10"

			6/30/16

			Lessons 9 and 10

			1) jQuery DOM manipulation
			2) AJAX

			Protocol - standard for communication

			HTTP - Hypertext Transfer Protocol
